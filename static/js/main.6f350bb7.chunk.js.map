{"version":3,"sources":["contexts/spell-context.js","components/GenericInput.js","components/BuffInput.js","components/CharacterCard.js","components/DamageIndicator.js","components/HiddenTextInput.js","components/SpellCard.js","components/AddSpell.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["SpellContext","createContext","initState","spells","character","percent","flat","buffs","reducer","state","action","type","payload","filter","ele","id","map","Error","SpellContextProvider","props","useReducer","encoded","localStorage","getItem","undefined","loadedState","JSON","parse","atob","getState","dispatch","useEffect","setItem","btoa","stringify","console","log","saveState","Provider","value","children","GenericInput","handleChange","bind","event","this","target","FormGroup","Row","Col","className","FormLabel","label","FormControl","data","onChange","Component","BuffInput","text","split","element","parseBuffs","placeholder","as","rows","CharacterCard","deleteSpell","context","spell","Card","Header","Body","contextType","DamageIndicator","style","damage","HiddenTextInput","autoFocus","onFocus","select","SpellCard","calculateDamage","base","dam","Math","floor","Number","i","length","handleDamageChange","handleNameChange","name","Button","onClick","AddSpell","useContext","uuidv4","Main","Container","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f350bb7.chunk.js","sourcesContent":["import React, { useReducer, createContext, useEffect } from \"react\";\n\nexport const SpellContext = createContext();\n\nconst initState = {\n  spells: [],\n  character: {\n    percent: 0,\n    flat: 0,\n    buffs: [],\n  },\n};\n\nconst saveState = (state) => {\n  localStorage.setItem('spellContextState', btoa(JSON.stringify(state)));\n  console.log(\"Saved State\")\n}\n\nconst getState = () =>{\n  const encoded = localStorage.getItem('spellContextState') \n  if(encoded === undefined || encoded === null) {\n    return initState\n  }\n  let loadedState = JSON.parse(atob(encoded));\n  loadedState.character.buffs = [] // Clear buffs on load\n  return loadedState;\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_SPELL\":\n      return {\n        spells: [...state.spells, action.payload],\n        character: state.character,\n      };\n    case \"DEL_SPELL\":\n      return {\n        spells: state.spells.filter((ele) => ele.id !== action.payload),\n        character: state.character,\n      };\n    case \"UPDATE_SPELL\":\n      return {\n        spells: state.spells.map((ele) => {\n          if (ele.id === action.payload.id) {\n            return action.payload;\n          }\n          return ele;\n        }),\n        character: state.character,\n      };\n    case \"UPDATE_CHARACTER\":\n      return {\n        character: action.payload,\n        spells: state.spells,\n      };\n    default:\n      throw new Error(\"Action not valid\");\n  }\n};\n\nexport const SpellContextProvider = (props) => {\n  const [state, dispatch] = useReducer(reducer, getState());\n\n  useEffect(()=>{\n    saveState(state)\n  }, [state])\n  return (\n    <SpellContext.Provider value={[state, dispatch]}>\n      {props.children}\n    </SpellContext.Provider>\n  );\n};\n","import React, { Component } from \"react\";\nimport { FormGroup, FormLabel, FormControl } from \"react-bootstrap\";\nimport { Row, Col } from \"react-bootstrap\";\n\nclass GenericInput extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.handleChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <FormGroup>\n        <Row>\n          <Col className=\"text-right\">\n            <FormLabel>{this.props.label}</FormLabel>\n          </Col>\n          <Col>\n            <FormControl\n              type=\"number\"\n              value={this.props.data[this.props.target]}\n              onChange={this.handleChange}\n            />\n          </Col>\n        </Row>\n      </FormGroup>\n    );\n  }\n}\n\nexport default GenericInput;\n","import React, { Component } from \"react\";\nimport { FormControl, FormGroup } from \"react-bootstrap\";\n\nclass BuffInput extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  parseBuffs(text) {\n    let buffs = text.split(\"\\n\");\n    buffs = buffs.map((element) => element.split(\" \")[0]);\n    return buffs;\n  }\n\n  handleChange(event) {\n    let buffs = this.parseBuffs(event.target.value);\n    this.props.handleChange(buffs);\n  }\n\n  render() {\n    return (\n      <FormGroup>\n        <FormControl\n          placeholder=\"Percent Damager Modifiers\"\n          as=\"textarea\"\n          rows=\"13\"\n          onChange={this.handleChange}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nexport default BuffInput;\n","import React, { Component } from \"react\";\nimport { SpellContext } from \"../contexts/spell-context\";\nimport { Card } from \"react-bootstrap\";\nimport GenericInput from \"./GenericInput\";\nimport BuffInput from \"./BuffInput\";\n\nclass CharacterCard extends Component {\n  static contextType = SpellContext;\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.deleteSpell = this.deleteSpell.bind(this);\n  }\n\n  deleteSpell() {\n    const [, dispatch] = this.context;\n    dispatch({\n      type: \"DEL_SPELL\",\n      payload: this.spell.id,\n    });\n  }\n\n  handleChange(target) {\n    return (value) => {\n      const [state, dispatch] = this.context;\n      let character = state.character;\n      character[target] = value;\n      dispatch({ type: \"UPDATE_CHARACTER\", payload: character });\n    };\n  }\n\n  render() {\n    const [state, ] = this.context;\n    return (\n      <Card className=\"mt-4\">\n        <Card.Header className=\"text-center\">Character Stats</Card.Header>\n        <Card.Body>\n          <GenericInput\n            label=\"Percent Damage\"\n            target=\"percent\"\n            data={state.character}\n            handleChange={this.handleChange(\"percent\")}\n          />\n          <GenericInput\n            label=\"Flat Damage\"\n            target=\"flat\"\n            data={state.character}\n            handleChange={this.handleChange(\"flat\")}\n          />\n          <BuffInput\n            target=\"buffs\"\n            character={state.character}\n            handleChange={this.handleChange(\"buffs\")}\n          />\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default CharacterCard;\n","import React from 'react'\n\nfunction DamageIndicator(props){ \n    return (\n      <div style={{\"font-size\": \"2em\"}} className=\"text-right\">\n       { props.damage }\n      </div>\n    )\n}   \n\nexport default DamageIndicator;","import React from 'react';\nimport { FormControl } from 'react-bootstrap';\nimport \"./HiddenTextInput.css\"\n\nconst HiddenTextInput = (props) => {\n    const handleChange = (event) => {\n      props.handleChange(event.target.value);\n    }\n\n    const handleOnFocus = (event) =>{\n        event.target.select()\n    }\n\n    return ( <FormControl autoFocus onFocus={handleOnFocus} onChange={handleChange} className=\"transparent-input\" type=\"text\" value={props.value} /> );\n}\n \nexport default HiddenTextInput;","import React, { Component } from \"react\";\nimport { Row, Col, Card, Button } from \"react-bootstrap\";\nimport GenericInput from \"./GenericInput\";\nimport DamageIndicator from \"./DamageIndicator\";\nimport { SpellContext } from \"../contexts/spell-context\";\nimport HiddenTextInput from \"./HiddenTextInput\";\n\nclass SpellCard extends Component {\n  static contextType = SpellContext;\n  constructor(props) {\n    super(props);\n    this.handleDamageChange = this.handleDamageChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.deleteSpell = this.deleteSpell.bind(this);\n  }\n  deleteSpell() {\n    const [, dispatch] = this.context;\n    dispatch({ type: \"DEL_SPELL\", payload: this.props.spell.id });\n  }\n\n  handleNameChange(value){\n    const [, dispatch] = this.context;\n    dispatch({\n      type: \"UPDATE_SPELL\",\n      payload: {\n        ...this.props.spell,\n        name: value,\n      },\n    });\n  }\n\n  handleDamageChange(value) {\n    const [, dispatch] = this.context;\n    dispatch({\n      type: \"UPDATE_SPELL\",\n      payload: {\n        ...this.props.spell,\n        base: value,\n      },\n    });\n  }\n\n  calculateDamage = (base, percent, flat, buffs) => {\n    let dam = Math.floor(\n      (1 + Number(percent) / 100) * Number(base) + Number(flat)\n    );\n    for (let i = 0; i < buffs.length; i++) {\n      dam *= 1 + buffs[i] / 100;\n      dam = Math.floor(dam);\n    }\n    return dam;\n  };\n\n  render() {\n    const [state, ] = this.context;\n    let damage = this.calculateDamage(\n      this.props.spell.base,\n      state.character.percent,\n      state.character.flat,\n      state.character.buffs\n    );\n    return (\n      <Card className=\"mt-4\">\n        <Card.Header>\n          <Row>\n            <Col className=\"\">\n              <HiddenTextInput value={this.props.spell.name} handleChange={this.handleNameChange}></HiddenTextInput>\n            </Col>\n            <Col className=\"col-sm-3 col-md-2 col-lg-2\">\n              <Button\n                onClick={this.deleteSpell}\n                className=\"btn-danger float-right\"\n              >\n                X\n              </Button>\n            </Col>\n          </Row>\n        </Card.Header>\n        <Card.Body>\n          <GenericInput\n            label=\"Base Damage\"\n            target=\"base\"\n            data={this.props.spell}\n            handleChange={this.handleDamageChange}\n          />\n          <DamageIndicator damage={damage} />\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default SpellCard;\n","import React, { useContext } from \"react\";\nimport { SpellContext } from \"../contexts/spell-context\";\nimport { Button } from \"react-bootstrap\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Row, Col } from \"react-bootstrap\";\n\nconst AddSpell = () => {\n  const [, dispatch] = useContext(SpellContext);\n\n  const handleChange = () => {\n    dispatch({\n      type: \"ADD_SPELL\",\n      payload: { id: uuidv4(), name: \"\", base: 0 },\n    });\n  };\n  return (\n    <Row className=\"mt-4\">\n      <Col className=\"text-center\">\n        <Button onClick={handleChange}>Add Spell</Button>\n      </Col>\n    </Row>\n  );\n};\n\nexport default AddSpell;\n","import React, { Component } from \"react\";\nimport CharacterCard from \"./CharacterCard\";\nimport SpellCard from \"./SpellCard\";\nimport AddSpell from \"./AddSpell\";\nimport { SpellContext } from \"../contexts/spell-context\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass Main extends Component {\n  static contextType = SpellContext;\n  render() {\n    const [state, ] = this.context;\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <CharacterCard />\n          </Col>\n          <Col>\n            {state.spells.map((ele) => (\n              <SpellCard key={ele.id} spell={ele}></SpellCard>\n            ))}\n            <AddSpell />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport Main from \"./components/Main\";\nimport { SpellContextProvider } from \"./contexts/spell-context\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SpellContextProvider>\n          <Main></Main>\n        </SpellContextProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}